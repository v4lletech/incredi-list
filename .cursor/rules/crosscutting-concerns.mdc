---
description: 
globs: 
alwaysApply: true
---
---
description: "Reglas de preocupaciones transversales: convención de nombres y logging"
globs:
  - "src/**/*.ts"
alwaysApply: false
---

# 3. Convenciones de Nombres
- PascalCase para tipos, clases y enums.  
- camelCase para funciones, propiedades y variables.  
- No anteponer `I` a las interfaces (use `UserRepository`, no `IUserRepository`).

# 12. Monitoreo y Logging
- Cada `DomainEvent` registra un log de nivel INFO.  
- Capturar excepciones de dominio con logs de nivel ERROR.

# 14. Control de Versiones y Repositorios
- Los commit debe seguir `Conventional Commit`.
- Los mensajes del commit deben estructurarse en dos tipos; cortos y largos como se muestra aquí:
## 14.1 Estructura general
```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```
## 14.2 Commit Corto
- Pocos cambios en archivos que reportar al CVS.
- Ideal para fixes, chore y otros cambios menores de menor impacto.

### 14.2.1 Ejemplo Commit Corto
````
feat(lang): add Polish language
````

## 14.2 Commit Largo
- Grandes cambios que reportar sulen ser mayores a un fix o patch de version.
- Ideal para nuevas caracteristicas o grandes modificaciones en el código.

### 14.2.1 Ejemplo Commit Largo
````
fix: prevent racing of requests

Introduce a request id and a reference to latest request. Dismiss
incoming responses other than from latest request.

Remove timeouts which were used to mitigate the racing issue but are
obsolete now.

Reviewed-by: Z
Refs: #123
````

# 16. Probar antes de proponer cambios
- Ejecuta los `Test Unitarios`, `Test de Integración` y `Test E2E` con `npm test` y `npm run cypress:run` para concer el estado del código.
- Si, los `Test Unitarios`, `Test de Integración` y `Test E2E` fallán ya puedes modificar el código base.
- Si, los `Test Unitarios` y `Test de Integración` fallán pero los `Test E2E` no fallan, entonces modifica los `Test Unitarios` y `Test de Integración`.
- Si, fallan los `Test E2E` entonces ya puedes modificar el código.

